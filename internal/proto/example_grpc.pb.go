// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: example.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiGolangTemplate_ListExample_FullMethodName = "/apigolangtemplate.pkg.proto.ApiGolangTemplate/ListExample"
)

// ApiGolangTemplateClient is the client API for ApiGolangTemplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiGolangTemplateClient interface {
	ListExample(ctx context.Context, in *ExampleListRequest, opts ...grpc.CallOption) (*ExampleListResponse, error)
}

type apiGolangTemplateClient struct {
	cc grpc.ClientConnInterface
}

func NewApiGolangTemplateClient(cc grpc.ClientConnInterface) ApiGolangTemplateClient {
	return &apiGolangTemplateClient{cc}
}

func (c *apiGolangTemplateClient) ListExample(ctx context.Context, in *ExampleListRequest, opts ...grpc.CallOption) (*ExampleListResponse, error) {
	out := new(ExampleListResponse)
	err := c.cc.Invoke(ctx, ApiGolangTemplate_ListExample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiGolangTemplateServer is the server API for ApiGolangTemplate service.
// All implementations must embed UnimplementedApiGolangTemplateServer
// for forward compatibility
type ApiGolangTemplateServer interface {
	ListExample(context.Context, *ExampleListRequest) (*ExampleListResponse, error)
	mustEmbedUnimplementedApiGolangTemplateServer()
}

// UnimplementedApiGolangTemplateServer must be embedded to have forward compatible implementations.
type UnimplementedApiGolangTemplateServer struct {
}

func (UnimplementedApiGolangTemplateServer) ListExample(context.Context, *ExampleListRequest) (*ExampleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExample not implemented")
}
func (UnimplementedApiGolangTemplateServer) mustEmbedUnimplementedApiGolangTemplateServer() {}

// UnsafeApiGolangTemplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiGolangTemplateServer will
// result in compilation errors.
type UnsafeApiGolangTemplateServer interface {
	mustEmbedUnimplementedApiGolangTemplateServer()
}

func RegisterApiGolangTemplateServer(s grpc.ServiceRegistrar, srv ApiGolangTemplateServer) {
	s.RegisterService(&ApiGolangTemplate_ServiceDesc, srv)
}

func _ApiGolangTemplate_ListExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGolangTemplateServer).ListExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiGolangTemplate_ListExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGolangTemplateServer).ListExample(ctx, req.(*ExampleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiGolangTemplate_ServiceDesc is the grpc.ServiceDesc for ApiGolangTemplate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiGolangTemplate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigolangtemplate.pkg.proto.ApiGolangTemplate",
	HandlerType: (*ApiGolangTemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExample",
			Handler:    _ApiGolangTemplate_ListExample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
